// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : colorlight_i5.v
// Device     : LFE5U-45F-6BG381C
// LiteX sha1 : c97b284
// Date       : 2025-10-01 09:27:45
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module colorlight_i5 (
    input  wire          clk25,
    input  wire          cpu_reset_n,
    output wire          sdram_clock
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
SoCWithDotProduct
└─── crg (_CRG)
│    └─── pll (ECP5PLL)
│    │    └─── [EHXPLLL]
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (SRAM)
└─── sram (SRAM)
└─── main_ram (SRAM)
└─── identifier (Identifier)
└─── dotp (DotProductAccel)
│    └─── [dot_product_accel]
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstorage_7* (CSRStorage)
│    │    └─── csrstorage_8* (CSRStorage)
│    │    └─── csrstorage_9* (CSRStorage)
│    │    └─── csrstorage_10* (CSRStorage)
│    │    └─── csrstorage_11* (CSRStorage)
│    │    └─── csrstorage_12* (CSRStorage)
│    │    └─── csrstorage_13* (CSRStorage)
│    │    └─── csrstorage_14* (CSRStorage)
│    │    └─── csrstorage_15* (CSRStorage)
│    │    └─── csrstorage_16* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    └─── sram_0* (SRAM)
└─── csr_interconnect (InterconnectShared)
└─── [FD1S3BX]
└─── [ODDRX1F]
└─── [FD1S3BX]
└─── [FD1S3BX]
└─── [FD1S3BX]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire   [13:0] bank_bus_adr;
reg    [31:0] bank_bus_dat_r = 32'd0;
wire   [31:0] bank_bus_dat_w;
wire          bank_bus_re;
wire          bank_bus_we;
reg    [29:0] basiclowerer0 = 30'd0;
reg    [31:0] basiclowerer1 = 32'd0;
reg     [3:0] basiclowerer2 = 4'd0;
reg           basiclowerer3 = 1'd0;
reg           basiclowerer4 = 1'd0;
reg           basiclowerer5 = 1'd0;
reg     [2:0] basiclowerer6 = 3'd0;
reg     [1:0] basiclowerer7 = 2'd0;
reg           crg = 1'd0;
wire          crg_ecp5pll0;
wire          crg_ecp5pll1;
reg           crg_ecp5pll2 = 1'd0;
wire          crg_ecp5pll3;
wire          crg_ecp5pll4;
wire          crg_ecp5pll5;
wire          csrbank;
wire   [31:0] csrbank_a00_r;
reg           csrbank_a00_re = 1'd0;
wire   [31:0] csrbank_a00_w;
reg           csrbank_a00_we = 1'd0;
wire   [31:0] csrbank_a10_r;
reg           csrbank_a10_re = 1'd0;
wire   [31:0] csrbank_a10_w;
reg           csrbank_a10_we = 1'd0;
wire   [31:0] csrbank_a20_r;
reg           csrbank_a20_re = 1'd0;
wire   [31:0] csrbank_a20_w;
reg           csrbank_a20_we = 1'd0;
wire   [31:0] csrbank_a30_r;
reg           csrbank_a30_re = 1'd0;
wire   [31:0] csrbank_a30_w;
reg           csrbank_a30_we = 1'd0;
wire   [31:0] csrbank_a40_r;
reg           csrbank_a40_re = 1'd0;
wire   [31:0] csrbank_a40_w;
reg           csrbank_a40_we = 1'd0;
wire   [31:0] csrbank_a50_r;
reg           csrbank_a50_re = 1'd0;
wire   [31:0] csrbank_a50_w;
reg           csrbank_a50_we = 1'd0;
wire   [31:0] csrbank_a60_r;
reg           csrbank_a60_re = 1'd0;
wire   [31:0] csrbank_a60_w;
reg           csrbank_a60_we = 1'd0;
wire   [31:0] csrbank_a70_r;
reg           csrbank_a70_re = 1'd0;
wire   [31:0] csrbank_a70_w;
reg           csrbank_a70_we = 1'd0;
wire   [31:0] csrbank_b00_r;
reg           csrbank_b00_re = 1'd0;
wire   [31:0] csrbank_b00_w;
reg           csrbank_b00_we = 1'd0;
wire   [31:0] csrbank_b10_r;
reg           csrbank_b10_re = 1'd0;
wire   [31:0] csrbank_b10_w;
reg           csrbank_b10_we = 1'd0;
wire   [31:0] csrbank_b20_r;
reg           csrbank_b20_re = 1'd0;
wire   [31:0] csrbank_b20_w;
reg           csrbank_b20_we = 1'd0;
wire   [31:0] csrbank_b30_r;
reg           csrbank_b30_re = 1'd0;
wire   [31:0] csrbank_b30_w;
reg           csrbank_b30_we = 1'd0;
wire   [31:0] csrbank_b40_r;
reg           csrbank_b40_re = 1'd0;
wire   [31:0] csrbank_b40_w;
reg           csrbank_b40_we = 1'd0;
wire   [31:0] csrbank_b50_r;
reg           csrbank_b50_re = 1'd0;
wire   [31:0] csrbank_b50_w;
reg           csrbank_b50_we = 1'd0;
wire   [31:0] csrbank_b60_r;
reg           csrbank_b60_re = 1'd0;
wire   [31:0] csrbank_b60_w;
reg           csrbank_b60_we = 1'd0;
wire   [31:0] csrbank_b70_r;
reg           csrbank_b70_re = 1'd0;
wire   [31:0] csrbank_b70_w;
reg           csrbank_b70_we = 1'd0;
wire          csrbank_done_r;
reg           csrbank_done_re = 1'd0;
wire          csrbank_done_w;
reg           csrbank_done_we = 1'd0;
wire   [31:0] csrbank_result_hi_r;
reg           csrbank_result_hi_re = 1'd0;
wire   [31:0] csrbank_result_hi_w;
reg           csrbank_result_hi_we = 1'd0;
wire   [31:0] csrbank_result_lo_r;
reg           csrbank_result_lo_re = 1'd0;
wire   [31:0] csrbank_result_lo_w;
reg           csrbank_result_lo_we = 1'd0;
wire          csrbank_start0_r;
reg           csrbank_start0_re = 1'd0;
wire          csrbank_start0_w;
reg           csrbank_start0_we = 1'd0;
wire          dotproductaccel0;
wire          dotproductaccel1;
wire   [63:0] dotproductaccel2;
wire   [31:0] dotproductaccel_a0;
wire   [31:0] dotproductaccel_a1;
wire   [31:0] dotproductaccel_a2;
wire   [31:0] dotproductaccel_a3;
wire   [31:0] dotproductaccel_a4;
wire   [31:0] dotproductaccel_a5;
wire   [31:0] dotproductaccel_a6;
wire   [31:0] dotproductaccel_a7;
wire   [31:0] dotproductaccel_b0;
wire   [31:0] dotproductaccel_b1;
wire   [31:0] dotproductaccel_b2;
wire   [31:0] dotproductaccel_b3;
wire   [31:0] dotproductaccel_b4;
wire   [31:0] dotproductaccel_b5;
wire   [31:0] dotproductaccel_b6;
wire   [31:0] dotproductaccel_b7;
reg           dotproductaccel_csrstatus00 = 1'd0;
wire          dotproductaccel_csrstatus01;
reg           dotproductaccel_csrstatus02 = 1'd0;
reg    [31:0] dotproductaccel_csrstatus10 = 32'd0;
wire          dotproductaccel_csrstatus11;
reg           dotproductaccel_csrstatus12 = 1'd0;
reg    [31:0] dotproductaccel_csrstatus20 = 32'd0;
wire          dotproductaccel_csrstatus21;
reg           dotproductaccel_csrstatus22 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage00 = 32'd0;
reg           dotproductaccel_csrstorage01 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage10 = 32'd0;
reg    [31:0] dotproductaccel_csrstorage100 = 32'd0;
reg           dotproductaccel_csrstorage101 = 1'd0;
reg           dotproductaccel_csrstorage11 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage110 = 32'd0;
reg           dotproductaccel_csrstorage111 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage120 = 32'd0;
reg           dotproductaccel_csrstorage121 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage130 = 32'd0;
reg           dotproductaccel_csrstorage131 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage140 = 32'd0;
reg           dotproductaccel_csrstorage141 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage150 = 32'd0;
reg           dotproductaccel_csrstorage151 = 1'd0;
reg           dotproductaccel_csrstorage160 = 1'd0;
reg           dotproductaccel_csrstorage161 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage20 = 32'd0;
reg           dotproductaccel_csrstorage21 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage30 = 32'd0;
reg           dotproductaccel_csrstorage31 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage40 = 32'd0;
reg           dotproductaccel_csrstorage41 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage50 = 32'd0;
reg           dotproductaccel_csrstorage51 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage60 = 32'd0;
reg           dotproductaccel_csrstorage61 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage70 = 32'd0;
reg           dotproductaccel_csrstorage71 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage80 = 32'd0;
reg           dotproductaccel_csrstorage81 = 1'd0;
reg    [31:0] dotproductaccel_csrstorage90 = 32'd0;
reg           dotproductaccel_csrstorage91 = 1'd0;
wire          ecp5pll;
wire          ecp5pll_ecp5pll;
reg           fsm0 = 1'd0;
reg           fsm1 = 1'd0;
wire   [13:0] interconnectshared_adr;
wire   [31:0] interconnectshared_dat_r;
wire   [31:0] interconnectshared_dat_w;
wire          interconnectshared_re;
wire          interconnectshared_we;
reg           interface0_ack0 = 1'd0;
reg           interface0_ack1 = 1'd0;
wire   [29:0] interface0_adr0;
wire   [29:0] interface0_adr1;
wire    [1:0] interface0_bte0;
wire    [1:0] interface0_bte1;
wire    [2:0] interface0_cti0;
wire    [2:0] interface0_cti1;
wire          interface0_cyc0;
wire          interface0_cyc1;
wire   [31:0] interface0_dat_r0;
reg    [31:0] interface0_dat_r1 = 32'd0;
wire   [31:0] interface0_dat_w0;
wire   [31:0] interface0_dat_w1;
reg           interface0_err0 = 1'd0;
reg           interface0_err1 = 1'd0;
wire    [3:0] interface0_sel0;
wire    [3:0] interface0_sel1;
wire          interface0_stb0;
wire          interface0_stb1;
wire          interface0_we0;
wire          interface0_we1;
reg           interface1_ack = 1'd0;
wire   [29:0] interface1_adr0;
reg    [13:0] interface1_adr1 = 14'd0;
wire    [1:0] interface1_bte;
wire    [2:0] interface1_cti;
wire          interface1_cyc;
wire   [31:0] interface1_dat_r0;
wire   [31:0] interface1_dat_r1;
wire   [31:0] interface1_dat_w0;
reg    [31:0] interface1_dat_w1 = 32'd0;
reg           interface1_err = 1'd0;
reg           interface1_re = 1'd0;
wire    [3:0] interface1_sel;
wire          interface1_stb;
wire          interface1_we0;
reg           interface1_we1 = 1'd0;
wire          latticeecp5asyncresetsynchronizerimpl0;
wire          latticeecp5asyncresetsynchronizerimpl1;
reg           socbushandler_ack = 1'd0;
wire   [29:0] socbushandler_adr;
wire    [1:0] socbushandler_bte;
wire    [2:0] socbushandler_cti;
wire          socbushandler_cyc;
reg    [31:0] socbushandler_dat_r = 32'd0;
wire   [31:0] socbushandler_dat_w;
reg     [3:0] socbushandler_decoder0 = 4'd0;
reg     [3:0] socbushandler_decoder1 = 4'd0;
wire          socbushandler_err;
wire    [1:0] socbushandler_roundrobin0;
reg           socbushandler_roundrobin1 = 1'd0;
wire    [3:0] socbushandler_sel;
wire          socbushandler_stb;
reg           socbushandler_timeout = 1'd0;
wire          socbushandler_timeout_waittimer0;
wire          socbushandler_timeout_waittimer1;
reg    [19:0] socbushandler_timeout_waittimer2 = 20'd1000000;
wire          socbushandler_we;
reg           socwithdotproduct_ack = 1'd0;
wire   [29:0] socwithdotproduct_adr;
wire    [1:0] socwithdotproduct_bte;
wire    [2:0] socwithdotproduct_cti;
wire          socwithdotproduct_cyc;
wire   [31:0] socwithdotproduct_dat_r;
wire   [31:0] socwithdotproduct_dat_w;
reg           socwithdotproduct_err = 1'd0;
wire    [3:0] socwithdotproduct_sel;
reg           socwithdotproduct_sram = 1'd0;
wire   [12:0] socwithdotproduct_sram_memory0;
wire   [31:0] socwithdotproduct_sram_memory1;
wire          socwithdotproduct_stb;
wire          socwithdotproduct_we;
reg           sram0 = 1'd0;
wire          sram0_1;
wire   [10:0] sram0_memory00;
wire   [31:0] sram0_memory01;
reg     [3:0] sram0_memory02 = 4'd0;
wire   [31:0] sram0_memory03;
reg           sram1 = 1'd0;
reg           sram1_1 = 1'd0;
wire   [13:0] sram1_memory10;
wire   [31:0] sram1_memory11;
reg     [3:0] sram1_memory12 = 4'd0;
wire   [31:0] sram1_memory13;
wire   [13:0] sram_bus_adr;
reg    [31:0] sram_bus_dat_r = 32'd0;
wire   [31:0] sram_bus_dat_w;
wire          sram_bus_re;
wire          sram_bus_we;
wire    [4:0] sram_memory0;
wire    [7:0] sram_memory1;
wire          sys_clk;
wire          sys_ps_clk;
wire          sys_ps_rst;
wire          sys_rst;
reg           vexriscv0 = 1'd0;
reg    [31:0] vexriscv1 = 32'd0;
reg    [31:0] vexriscv2 = 32'd0;
wire          vexriscv_interface0_ack;
wire   [29:0] vexriscv_interface0_adr;
wire    [1:0] vexriscv_interface0_bte;
wire    [2:0] vexriscv_interface0_cti;
wire          vexriscv_interface0_cyc;
wire   [31:0] vexriscv_interface0_dat_r;
wire   [31:0] vexriscv_interface0_dat_w;
wire          vexriscv_interface0_err;
wire    [3:0] vexriscv_interface0_sel;
wire          vexriscv_interface0_stb;
wire          vexriscv_interface0_we;
wire          vexriscv_interface1_ack;
wire   [29:0] vexriscv_interface1_adr;
wire    [1:0] vexriscv_interface1_bte;
wire    [2:0] vexriscv_interface1_cti;
wire          vexriscv_interface1_cyc;
wire   [31:0] vexriscv_interface1_dat_r;
wire   [31:0] vexriscv_interface1_dat_w;
wire          vexriscv_interface1_err;
wire    [3:0] vexriscv_interface1_sel;
wire          vexriscv_interface1_stb;
wire          vexriscv_interface1_we;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign crg_ecp5pll0 = ((~cpu_reset_n) | crg);
assign crg_ecp5pll3 = clk25;
assign sys_clk = crg_ecp5pll4;
assign sys_ps_clk = crg_ecp5pll5;
assign crg_ecp5pll1 = (ecp5pll & (~crg_ecp5pll0));
assign socbushandler_adr = basiclowerer0;
assign socbushandler_dat_w = basiclowerer1;
assign socbushandler_sel = basiclowerer2;
assign socbushandler_cyc = basiclowerer3;
assign socbushandler_stb = basiclowerer4;
assign socbushandler_we = basiclowerer5;
assign socbushandler_cti = basiclowerer6;
assign socbushandler_bte = basiclowerer7;
assign vexriscv_interface0_dat_r = socbushandler_dat_r;
assign vexriscv_interface1_dat_r = socbushandler_dat_r;
assign vexriscv_interface0_ack = (socbushandler_ack & (socbushandler_roundrobin1 == 1'd0));
assign vexriscv_interface1_ack = (socbushandler_ack & (socbushandler_roundrobin1 == 1'd1));
assign vexriscv_interface0_err = (socbushandler_err & (socbushandler_roundrobin1 == 1'd0));
assign vexriscv_interface1_err = (socbushandler_err & (socbushandler_roundrobin1 == 1'd1));
assign socbushandler_roundrobin0 = {vexriscv_interface1_cyc, vexriscv_interface0_cyc};
always @(*) begin
    socbushandler_decoder0 <= 4'd0;
    socbushandler_decoder0[0] <= (socbushandler_adr[29:13] == 1'd0);
    socbushandler_decoder0[1] <= (socbushandler_adr[29:11] == 16'd32768);
    socbushandler_decoder0[2] <= (socbushandler_adr[29:14] == 15'd16384);
    socbushandler_decoder0[3] <= (socbushandler_adr[29:14] == 16'd61440);
end
assign socwithdotproduct_adr = socbushandler_adr;
assign socwithdotproduct_dat_w = socbushandler_dat_w;
assign socwithdotproduct_sel = socbushandler_sel;
assign socwithdotproduct_stb = socbushandler_stb;
assign socwithdotproduct_we = socbushandler_we;
assign socwithdotproduct_cti = socbushandler_cti;
assign socwithdotproduct_bte = socbushandler_bte;
assign interface0_adr0 = socbushandler_adr;
assign interface0_dat_w0 = socbushandler_dat_w;
assign interface0_sel0 = socbushandler_sel;
assign interface0_stb0 = socbushandler_stb;
assign interface0_we0 = socbushandler_we;
assign interface0_cti0 = socbushandler_cti;
assign interface0_bte0 = socbushandler_bte;
assign interface1_adr0 = socbushandler_adr;
assign interface1_dat_w0 = socbushandler_dat_w;
assign interface1_sel = socbushandler_sel;
assign interface1_stb = socbushandler_stb;
assign interface1_we0 = socbushandler_we;
assign interface1_cti = socbushandler_cti;
assign interface1_bte = socbushandler_bte;
assign interface0_adr1 = socbushandler_adr;
assign interface0_dat_w1 = socbushandler_dat_w;
assign interface0_sel1 = socbushandler_sel;
assign interface0_stb1 = socbushandler_stb;
assign interface0_we1 = socbushandler_we;
assign interface0_cti1 = socbushandler_cti;
assign interface0_bte1 = socbushandler_bte;
assign socwithdotproduct_cyc = (socbushandler_cyc & socbushandler_decoder0[0]);
assign interface0_cyc0 = (socbushandler_cyc & socbushandler_decoder0[1]);
assign interface1_cyc = (socbushandler_cyc & socbushandler_decoder0[2]);
assign interface0_cyc1 = (socbushandler_cyc & socbushandler_decoder0[3]);
assign socbushandler_err = (((socwithdotproduct_err | interface0_err0) | interface1_err) | interface0_err1);
assign socbushandler_timeout_waittimer0 = ((socbushandler_stb & socbushandler_cyc) & (~socbushandler_ack));
always @(*) begin
    socbushandler_ack <= 1'd0;
    socbushandler_dat_r <= 32'd0;
    socbushandler_timeout <= 1'd0;
    socbushandler_ack <= (((socwithdotproduct_ack | interface0_ack0) | interface1_ack) | interface0_ack1);
    socbushandler_dat_r <= (((({32{socbushandler_decoder1[0]}} & socwithdotproduct_dat_r) | ({32{socbushandler_decoder1[1]}} & interface0_dat_r0)) | ({32{socbushandler_decoder1[2]}} & interface1_dat_r0)) | ({32{socbushandler_decoder1[3]}} & interface0_dat_r1));
    if (socbushandler_timeout_waittimer1) begin
        socbushandler_dat_r <= 32'd4294967295;
        socbushandler_ack <= 1'd1;
        socbushandler_timeout <= 1'd1;
    end
end
assign socbushandler_timeout_waittimer1 = (socbushandler_timeout_waittimer2 == 1'd0);
assign socwithdotproduct_sram_memory0 = socwithdotproduct_adr[12:0];
assign socwithdotproduct_dat_r = socwithdotproduct_sram_memory1;
always @(*) begin
    sram0_memory02 <= 4'd0;
    sram0_memory02[0] <= (((interface0_cyc0 & interface0_stb0) & interface0_we0) & interface0_sel0[0]);
    sram0_memory02[1] <= (((interface0_cyc0 & interface0_stb0) & interface0_we0) & interface0_sel0[1]);
    sram0_memory02[2] <= (((interface0_cyc0 & interface0_stb0) & interface0_we0) & interface0_sel0[2]);
    sram0_memory02[3] <= (((interface0_cyc0 & interface0_stb0) & interface0_we0) & interface0_sel0[3]);
end
assign sram0_memory00 = interface0_adr0[10:0];
assign interface0_dat_r0 = sram0_memory01;
assign sram0_memory03 = interface0_dat_w0;
always @(*) begin
    sram1_memory12 <= 4'd0;
    sram1_memory12[0] <= (((interface1_cyc & interface1_stb) & interface1_we0) & interface1_sel[0]);
    sram1_memory12[1] <= (((interface1_cyc & interface1_stb) & interface1_we0) & interface1_sel[1]);
    sram1_memory12[2] <= (((interface1_cyc & interface1_stb) & interface1_we0) & interface1_sel[2]);
    sram1_memory12[3] <= (((interface1_cyc & interface1_stb) & interface1_we0) & interface1_sel[3]);
end
assign sram1_memory10 = interface1_adr0[13:0];
assign interface1_dat_r0 = sram1_memory11;
assign sram1_memory13 = interface1_dat_w0;
assign dotproductaccel_a0 = dotproductaccel_csrstorage00;
assign dotproductaccel_a1 = dotproductaccel_csrstorage10;
assign dotproductaccel_a2 = dotproductaccel_csrstorage20;
assign dotproductaccel_a3 = dotproductaccel_csrstorage30;
assign dotproductaccel_a4 = dotproductaccel_csrstorage40;
assign dotproductaccel_a5 = dotproductaccel_csrstorage50;
assign dotproductaccel_a6 = dotproductaccel_csrstorage60;
assign dotproductaccel_a7 = dotproductaccel_csrstorage70;
assign dotproductaccel_b0 = dotproductaccel_csrstorage80;
assign dotproductaccel_b1 = dotproductaccel_csrstorage90;
assign dotproductaccel_b2 = dotproductaccel_csrstorage100;
assign dotproductaccel_b3 = dotproductaccel_csrstorage110;
assign dotproductaccel_b4 = dotproductaccel_csrstorage120;
assign dotproductaccel_b5 = dotproductaccel_csrstorage130;
assign dotproductaccel_b6 = dotproductaccel_csrstorage140;
assign dotproductaccel_b7 = dotproductaccel_csrstorage150;
assign dotproductaccel0 = dotproductaccel_csrstorage160;
always @(*) begin
    fsm1 <= 1'd0;
    interface0_ack1 <= 1'd0;
    interface0_dat_r1 <= 32'd0;
    interface1_adr1 <= 14'd0;
    interface1_dat_w1 <= 32'd0;
    interface1_re <= 1'd0;
    interface1_we1 <= 1'd0;
    fsm1 <= fsm0;
    case (fsm0)
        1'd1: begin
            interface0_ack1 <= 1'd1;
            interface0_dat_r1 <= interface1_dat_r1;
            fsm1 <= 1'd0;
        end
        default: begin
            interface1_dat_w1 <= interface0_dat_w1;
            if ((interface0_cyc1 & interface0_stb1)) begin
                interface1_adr1 <= interface0_adr1[29:0];
                interface1_re <= ((~interface0_we1) & (interface0_sel1 != 1'd0));
                interface1_we1 <= (interface0_we1 & (interface0_sel1 != 1'd0));
                fsm1 <= 1'd1;
            end
        end
    endcase
end
assign csrbank = (bank_bus_adr[13:9] == 1'd0);
assign csrbank_a00_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_a00_re <= 1'd0;
    csrbank_a00_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 1'd0))) begin
        csrbank_a00_re <= bank_bus_we;
        csrbank_a00_we <= bank_bus_re;
    end
end
assign csrbank_a10_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_a10_re <= 1'd0;
    csrbank_a10_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 1'd1))) begin
        csrbank_a10_re <= bank_bus_we;
        csrbank_a10_we <= bank_bus_re;
    end
end
assign csrbank_a20_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_a20_re <= 1'd0;
    csrbank_a20_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 2'd2))) begin
        csrbank_a20_re <= bank_bus_we;
        csrbank_a20_we <= bank_bus_re;
    end
end
assign csrbank_a30_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_a30_re <= 1'd0;
    csrbank_a30_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 2'd3))) begin
        csrbank_a30_re <= bank_bus_we;
        csrbank_a30_we <= bank_bus_re;
    end
end
assign csrbank_a40_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_a40_re <= 1'd0;
    csrbank_a40_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 3'd4))) begin
        csrbank_a40_re <= bank_bus_we;
        csrbank_a40_we <= bank_bus_re;
    end
end
assign csrbank_a50_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_a50_re <= 1'd0;
    csrbank_a50_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 3'd5))) begin
        csrbank_a50_re <= bank_bus_we;
        csrbank_a50_we <= bank_bus_re;
    end
end
assign csrbank_a60_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_a60_re <= 1'd0;
    csrbank_a60_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 3'd6))) begin
        csrbank_a60_re <= bank_bus_we;
        csrbank_a60_we <= bank_bus_re;
    end
end
assign csrbank_a70_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_a70_re <= 1'd0;
    csrbank_a70_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 3'd7))) begin
        csrbank_a70_re <= bank_bus_we;
        csrbank_a70_we <= bank_bus_re;
    end
end
assign csrbank_b00_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_b00_re <= 1'd0;
    csrbank_b00_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 4'd8))) begin
        csrbank_b00_re <= bank_bus_we;
        csrbank_b00_we <= bank_bus_re;
    end
end
assign csrbank_b10_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_b10_re <= 1'd0;
    csrbank_b10_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 4'd9))) begin
        csrbank_b10_re <= bank_bus_we;
        csrbank_b10_we <= bank_bus_re;
    end
end
assign csrbank_b20_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_b20_re <= 1'd0;
    csrbank_b20_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 4'd10))) begin
        csrbank_b20_re <= bank_bus_we;
        csrbank_b20_we <= bank_bus_re;
    end
end
assign csrbank_b30_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_b30_re <= 1'd0;
    csrbank_b30_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 4'd11))) begin
        csrbank_b30_re <= bank_bus_we;
        csrbank_b30_we <= bank_bus_re;
    end
end
assign csrbank_b40_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_b40_re <= 1'd0;
    csrbank_b40_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 4'd12))) begin
        csrbank_b40_re <= bank_bus_we;
        csrbank_b40_we <= bank_bus_re;
    end
end
assign csrbank_b50_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_b50_re <= 1'd0;
    csrbank_b50_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 4'd13))) begin
        csrbank_b50_re <= bank_bus_we;
        csrbank_b50_we <= bank_bus_re;
    end
end
assign csrbank_b60_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_b60_re <= 1'd0;
    csrbank_b60_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 4'd14))) begin
        csrbank_b60_re <= bank_bus_we;
        csrbank_b60_we <= bank_bus_re;
    end
end
assign csrbank_b70_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_b70_re <= 1'd0;
    csrbank_b70_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 4'd15))) begin
        csrbank_b70_re <= bank_bus_we;
        csrbank_b70_we <= bank_bus_re;
    end
end
assign csrbank_start0_r = bank_bus_dat_w[0];
always @(*) begin
    csrbank_start0_re <= 1'd0;
    csrbank_start0_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 5'd16))) begin
        csrbank_start0_re <= bank_bus_we;
        csrbank_start0_we <= bank_bus_re;
    end
end
assign csrbank_done_r = bank_bus_dat_w[0];
always @(*) begin
    csrbank_done_re <= 1'd0;
    csrbank_done_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 5'd17))) begin
        csrbank_done_re <= bank_bus_we;
        csrbank_done_we <= bank_bus_re;
    end
end
assign csrbank_result_lo_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_result_lo_re <= 1'd0;
    csrbank_result_lo_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 5'd18))) begin
        csrbank_result_lo_re <= bank_bus_we;
        csrbank_result_lo_we <= bank_bus_re;
    end
end
assign csrbank_result_hi_r = bank_bus_dat_w[31:0];
always @(*) begin
    csrbank_result_hi_re <= 1'd0;
    csrbank_result_hi_we <= 1'd0;
    if ((csrbank & (bank_bus_adr[8:0] == 5'd19))) begin
        csrbank_result_hi_re <= bank_bus_we;
        csrbank_result_hi_we <= bank_bus_re;
    end
end
assign csrbank_a00_w = dotproductaccel_csrstorage00[31:0];
assign csrbank_a10_w = dotproductaccel_csrstorage10[31:0];
assign csrbank_a20_w = dotproductaccel_csrstorage20[31:0];
assign csrbank_a30_w = dotproductaccel_csrstorage30[31:0];
assign csrbank_a40_w = dotproductaccel_csrstorage40[31:0];
assign csrbank_a50_w = dotproductaccel_csrstorage50[31:0];
assign csrbank_a60_w = dotproductaccel_csrstorage60[31:0];
assign csrbank_a70_w = dotproductaccel_csrstorage70[31:0];
assign csrbank_b00_w = dotproductaccel_csrstorage80[31:0];
assign csrbank_b10_w = dotproductaccel_csrstorage90[31:0];
assign csrbank_b20_w = dotproductaccel_csrstorage100[31:0];
assign csrbank_b30_w = dotproductaccel_csrstorage110[31:0];
assign csrbank_b40_w = dotproductaccel_csrstorage120[31:0];
assign csrbank_b50_w = dotproductaccel_csrstorage130[31:0];
assign csrbank_b60_w = dotproductaccel_csrstorage140[31:0];
assign csrbank_b70_w = dotproductaccel_csrstorage150[31:0];
assign csrbank_start0_w = dotproductaccel_csrstorage160;
assign csrbank_done_w = dotproductaccel_csrstatus00;
assign dotproductaccel_csrstatus01 = csrbank_done_we;
assign csrbank_result_lo_w = dotproductaccel_csrstatus10[31:0];
assign dotproductaccel_csrstatus11 = csrbank_result_lo_we;
assign csrbank_result_hi_w = dotproductaccel_csrstatus20[31:0];
assign dotproductaccel_csrstatus21 = csrbank_result_hi_we;
assign sram0_1 = (sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    sram_bus_dat_r <= 32'd0;
    if (sram1_1) begin
        sram_bus_dat_r <= sram_memory1;
    end
end
assign sram_memory0 = sram_bus_adr[4:0];
assign interconnectshared_adr = interface1_adr1;
assign interconnectshared_re = interface1_re;
assign interconnectshared_we = interface1_we1;
assign interconnectshared_dat_w = interface1_dat_w1;
assign interface1_dat_r1 = interconnectshared_dat_r;
assign bank_bus_adr = interconnectshared_adr;
assign sram_bus_adr = interconnectshared_adr;
assign bank_bus_re = interconnectshared_re;
assign sram_bus_re = interconnectshared_re;
assign bank_bus_we = interconnectshared_we;
assign sram_bus_we = interconnectshared_we;
assign bank_bus_dat_w = interconnectshared_dat_w;
assign sram_bus_dat_w = interconnectshared_dat_w;
assign interconnectshared_dat_r = (bank_bus_dat_r | sram_bus_dat_r);
always @(*) begin
    basiclowerer0 <= 30'd0;
    case (socbushandler_roundrobin1)
        1'd0: begin
            basiclowerer0 <= vexriscv_interface0_adr;
        end
        default: begin
            basiclowerer0 <= vexriscv_interface1_adr;
        end
    endcase
end
always @(*) begin
    basiclowerer1 <= 32'd0;
    case (socbushandler_roundrobin1)
        1'd0: begin
            basiclowerer1 <= vexriscv_interface0_dat_w;
        end
        default: begin
            basiclowerer1 <= vexriscv_interface1_dat_w;
        end
    endcase
end
always @(*) begin
    basiclowerer2 <= 4'd0;
    case (socbushandler_roundrobin1)
        1'd0: begin
            basiclowerer2 <= vexriscv_interface0_sel;
        end
        default: begin
            basiclowerer2 <= vexriscv_interface1_sel;
        end
    endcase
end
always @(*) begin
    basiclowerer3 <= 1'd0;
    case (socbushandler_roundrobin1)
        1'd0: begin
            basiclowerer3 <= vexriscv_interface0_cyc;
        end
        default: begin
            basiclowerer3 <= vexriscv_interface1_cyc;
        end
    endcase
end
always @(*) begin
    basiclowerer4 <= 1'd0;
    case (socbushandler_roundrobin1)
        1'd0: begin
            basiclowerer4 <= vexriscv_interface0_stb;
        end
        default: begin
            basiclowerer4 <= vexriscv_interface1_stb;
        end
    endcase
end
always @(*) begin
    basiclowerer5 <= 1'd0;
    case (socbushandler_roundrobin1)
        1'd0: begin
            basiclowerer5 <= vexriscv_interface0_we;
        end
        default: begin
            basiclowerer5 <= vexriscv_interface1_we;
        end
    endcase
end
always @(*) begin
    basiclowerer6 <= 3'd0;
    case (socbushandler_roundrobin1)
        1'd0: begin
            basiclowerer6 <= vexriscv_interface0_cti;
        end
        default: begin
            basiclowerer6 <= vexriscv_interface1_cti;
        end
    endcase
end
always @(*) begin
    basiclowerer7 <= 2'd0;
    case (socbushandler_roundrobin1)
        1'd0: begin
            basiclowerer7 <= vexriscv_interface0_bte;
        end
        default: begin
            basiclowerer7 <= vexriscv_interface1_bte;
        end
    endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sys_clk) begin
    case (socbushandler_roundrobin1)
        1'd0: begin
            if ((~socbushandler_roundrobin0[0])) begin
                if (socbushandler_roundrobin0[1]) begin
                    socbushandler_roundrobin1 <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~socbushandler_roundrobin0[1])) begin
                if (socbushandler_roundrobin0[0]) begin
                    socbushandler_roundrobin1 <= 1'd0;
                end
            end
        end
    endcase
    socbushandler_decoder1 <= socbushandler_decoder0;
    if (socbushandler_timeout_waittimer0) begin
        if ((~socbushandler_timeout_waittimer1)) begin
            socbushandler_timeout_waittimer2 <= (socbushandler_timeout_waittimer2 - 1'd1);
        end
    end else begin
        socbushandler_timeout_waittimer2 <= 20'd1000000;
    end
    socwithdotproduct_ack <= 1'd0;
    if (((socwithdotproduct_cyc & socwithdotproduct_stb) & ((~socwithdotproduct_ack) | socwithdotproduct_sram))) begin
        socwithdotproduct_ack <= 1'd1;
    end
    interface0_ack0 <= 1'd0;
    if (((interface0_cyc0 & interface0_stb0) & ((~interface0_ack0) | sram0))) begin
        interface0_ack0 <= 1'd1;
    end
    interface1_ack <= 1'd0;
    if (((interface1_cyc & interface1_stb) & ((~interface1_ack) | sram1))) begin
        interface1_ack <= 1'd1;
    end
    dotproductaccel_csrstatus00 <= dotproductaccel1;
    dotproductaccel_csrstatus10 <= dotproductaccel2[31:0];
    dotproductaccel_csrstatus20 <= dotproductaccel2[63:32];
    fsm0 <= fsm1;
    bank_bus_dat_r <= 1'd0;
    if (csrbank) begin
        case (bank_bus_adr[8:0])
            1'd0: begin
                bank_bus_dat_r <= csrbank_a00_w;
            end
            1'd1: begin
                bank_bus_dat_r <= csrbank_a10_w;
            end
            2'd2: begin
                bank_bus_dat_r <= csrbank_a20_w;
            end
            2'd3: begin
                bank_bus_dat_r <= csrbank_a30_w;
            end
            3'd4: begin
                bank_bus_dat_r <= csrbank_a40_w;
            end
            3'd5: begin
                bank_bus_dat_r <= csrbank_a50_w;
            end
            3'd6: begin
                bank_bus_dat_r <= csrbank_a60_w;
            end
            3'd7: begin
                bank_bus_dat_r <= csrbank_a70_w;
            end
            4'd8: begin
                bank_bus_dat_r <= csrbank_b00_w;
            end
            4'd9: begin
                bank_bus_dat_r <= csrbank_b10_w;
            end
            4'd10: begin
                bank_bus_dat_r <= csrbank_b20_w;
            end
            4'd11: begin
                bank_bus_dat_r <= csrbank_b30_w;
            end
            4'd12: begin
                bank_bus_dat_r <= csrbank_b40_w;
            end
            4'd13: begin
                bank_bus_dat_r <= csrbank_b50_w;
            end
            4'd14: begin
                bank_bus_dat_r <= csrbank_b60_w;
            end
            4'd15: begin
                bank_bus_dat_r <= csrbank_b70_w;
            end
            5'd16: begin
                bank_bus_dat_r <= csrbank_start0_w;
            end
            5'd17: begin
                bank_bus_dat_r <= csrbank_done_w;
            end
            5'd18: begin
                bank_bus_dat_r <= csrbank_result_lo_w;
            end
            5'd19: begin
                bank_bus_dat_r <= csrbank_result_hi_w;
            end
        endcase
    end
    if (csrbank_a00_re) begin
        dotproductaccel_csrstorage00[31:0] <= csrbank_a00_r;
    end
    dotproductaccel_csrstorage01 <= csrbank_a00_re;
    if (csrbank_a10_re) begin
        dotproductaccel_csrstorage10[31:0] <= csrbank_a10_r;
    end
    dotproductaccel_csrstorage11 <= csrbank_a10_re;
    if (csrbank_a20_re) begin
        dotproductaccel_csrstorage20[31:0] <= csrbank_a20_r;
    end
    dotproductaccel_csrstorage21 <= csrbank_a20_re;
    if (csrbank_a30_re) begin
        dotproductaccel_csrstorage30[31:0] <= csrbank_a30_r;
    end
    dotproductaccel_csrstorage31 <= csrbank_a30_re;
    if (csrbank_a40_re) begin
        dotproductaccel_csrstorage40[31:0] <= csrbank_a40_r;
    end
    dotproductaccel_csrstorage41 <= csrbank_a40_re;
    if (csrbank_a50_re) begin
        dotproductaccel_csrstorage50[31:0] <= csrbank_a50_r;
    end
    dotproductaccel_csrstorage51 <= csrbank_a50_re;
    if (csrbank_a60_re) begin
        dotproductaccel_csrstorage60[31:0] <= csrbank_a60_r;
    end
    dotproductaccel_csrstorage61 <= csrbank_a60_re;
    if (csrbank_a70_re) begin
        dotproductaccel_csrstorage70[31:0] <= csrbank_a70_r;
    end
    dotproductaccel_csrstorage71 <= csrbank_a70_re;
    if (csrbank_b00_re) begin
        dotproductaccel_csrstorage80[31:0] <= csrbank_b00_r;
    end
    dotproductaccel_csrstorage81 <= csrbank_b00_re;
    if (csrbank_b10_re) begin
        dotproductaccel_csrstorage90[31:0] <= csrbank_b10_r;
    end
    dotproductaccel_csrstorage91 <= csrbank_b10_re;
    if (csrbank_b20_re) begin
        dotproductaccel_csrstorage100[31:0] <= csrbank_b20_r;
    end
    dotproductaccel_csrstorage101 <= csrbank_b20_re;
    if (csrbank_b30_re) begin
        dotproductaccel_csrstorage110[31:0] <= csrbank_b30_r;
    end
    dotproductaccel_csrstorage111 <= csrbank_b30_re;
    if (csrbank_b40_re) begin
        dotproductaccel_csrstorage120[31:0] <= csrbank_b40_r;
    end
    dotproductaccel_csrstorage121 <= csrbank_b40_re;
    if (csrbank_b50_re) begin
        dotproductaccel_csrstorage130[31:0] <= csrbank_b50_r;
    end
    dotproductaccel_csrstorage131 <= csrbank_b50_re;
    if (csrbank_b60_re) begin
        dotproductaccel_csrstorage140[31:0] <= csrbank_b60_r;
    end
    dotproductaccel_csrstorage141 <= csrbank_b60_re;
    if (csrbank_b70_re) begin
        dotproductaccel_csrstorage150[31:0] <= csrbank_b70_r;
    end
    dotproductaccel_csrstorage151 <= csrbank_b70_re;
    if (csrbank_start0_re) begin
        dotproductaccel_csrstorage160 <= csrbank_start0_r;
    end
    dotproductaccel_csrstorage161 <= csrbank_start0_re;
    dotproductaccel_csrstatus02 <= csrbank_done_re;
    dotproductaccel_csrstatus12 <= csrbank_result_lo_re;
    dotproductaccel_csrstatus22 <= csrbank_result_hi_re;
    sram1_1 <= sram0_1;
    if (sys_rst) begin
        socwithdotproduct_ack <= 1'd0;
        interface0_ack0 <= 1'd0;
        interface1_ack <= 1'd0;
        dotproductaccel_csrstorage00 <= 32'd0;
        dotproductaccel_csrstorage01 <= 1'd0;
        dotproductaccel_csrstorage10 <= 32'd0;
        dotproductaccel_csrstorage11 <= 1'd0;
        dotproductaccel_csrstorage20 <= 32'd0;
        dotproductaccel_csrstorage21 <= 1'd0;
        dotproductaccel_csrstorage30 <= 32'd0;
        dotproductaccel_csrstorage31 <= 1'd0;
        dotproductaccel_csrstorage40 <= 32'd0;
        dotproductaccel_csrstorage41 <= 1'd0;
        dotproductaccel_csrstorage50 <= 32'd0;
        dotproductaccel_csrstorage51 <= 1'd0;
        dotproductaccel_csrstorage60 <= 32'd0;
        dotproductaccel_csrstorage61 <= 1'd0;
        dotproductaccel_csrstorage70 <= 32'd0;
        dotproductaccel_csrstorage71 <= 1'd0;
        dotproductaccel_csrstorage80 <= 32'd0;
        dotproductaccel_csrstorage81 <= 1'd0;
        dotproductaccel_csrstorage90 <= 32'd0;
        dotproductaccel_csrstorage91 <= 1'd0;
        dotproductaccel_csrstorage100 <= 32'd0;
        dotproductaccel_csrstorage101 <= 1'd0;
        dotproductaccel_csrstorage110 <= 32'd0;
        dotproductaccel_csrstorage111 <= 1'd0;
        dotproductaccel_csrstorage120 <= 32'd0;
        dotproductaccel_csrstorage121 <= 1'd0;
        dotproductaccel_csrstorage130 <= 32'd0;
        dotproductaccel_csrstorage131 <= 1'd0;
        dotproductaccel_csrstorage140 <= 32'd0;
        dotproductaccel_csrstorage141 <= 1'd0;
        dotproductaccel_csrstorage150 <= 32'd0;
        dotproductaccel_csrstorage151 <= 1'd0;
        dotproductaccel_csrstorage160 <= 1'd0;
        dotproductaccel_csrstorage161 <= 1'd0;
        dotproductaccel_csrstatus00 <= 1'd0;
        dotproductaccel_csrstatus02 <= 1'd0;
        dotproductaccel_csrstatus10 <= 32'd0;
        dotproductaccel_csrstatus12 <= 1'd0;
        dotproductaccel_csrstatus20 <= 32'd0;
        dotproductaccel_csrstatus22 <= 1'd0;
        socbushandler_roundrobin1 <= 1'd0;
        socbushandler_decoder1 <= 4'd0;
        socbushandler_timeout_waittimer2 <= 20'd1000000;
        sram1_1 <= 1'd0;
        fsm0 <= 1'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 8192-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:8191];
initial begin
	$readmemh("colorlight_i5_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[socwithdotproduct_sram_memory0];
end
assign socwithdotproduct_sram_memory1 = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("colorlight_i5_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (sram0_memory02[0])
		sram[sram0_memory00][7:0] <= sram0_memory03[7:0];
	if (sram0_memory02[1])
		sram[sram0_memory00][15:8] <= sram0_memory03[15:8];
	if (sram0_memory02[2])
		sram[sram0_memory00][23:16] <= sram0_memory03[23:16];
	if (sram0_memory02[3])
		sram[sram0_memory00][31:24] <= sram0_memory03[31:24];
	sram_adr0 <= sram0_memory00;
end
assign sram0_memory01 = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory main_ram: 16384-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] main_ram[0:16383];
initial begin
	$readmemh("colorlight_i5_main_ram.init", main_ram);
end
reg [13:0] main_ram_adr0;
always @(posedge sys_clk) begin
	if (sram1_memory12[0])
		main_ram[sram1_memory10][7:0] <= sram1_memory13[7:0];
	if (sram1_memory12[1])
		main_ram[sram1_memory10][15:8] <= sram1_memory13[15:8];
	if (sram1_memory12[2])
		main_ram[sram1_memory10][23:16] <= sram1_memory13[23:16];
	if (sram1_memory12[3])
		main_ram[sram1_memory10][31:24] <= sram1_memory13[31:24];
	main_ram_adr0 <= sram1_memory10;
end
assign sram1_memory11 = main_ram[main_ram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 27-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:26];
initial begin
	$readmemh("colorlight_i5_mem.init", mem);
end
reg [4:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= sram_memory0;
end
assign sram_memory1 = mem[mem_adr0];


//------------------------------------------------------------------------------
// Instance dot_product_accel of dot_product_accel Module.
//------------------------------------------------------------------------------
dot_product_accel dot_product_accel(
	// Inputs.
	.a0     (dotproductaccel_a0),
	.a1     (dotproductaccel_a1),
	.a2     (dotproductaccel_a2),
	.a3     (dotproductaccel_a3),
	.a4     (dotproductaccel_a4),
	.a5     (dotproductaccel_a5),
	.a6     (dotproductaccel_a6),
	.a7     (dotproductaccel_a7),
	.b0     (dotproductaccel_b0),
	.b1     (dotproductaccel_b1),
	.b2     (dotproductaccel_b2),
	.b3     (dotproductaccel_b3),
	.b4     (dotproductaccel_b4),
	.b5     (dotproductaccel_b5),
	.b6     (dotproductaccel_b6),
	.b7     (dotproductaccel_b7),
	.clk    (sys_clk),
	.rst    (sys_rst),
	.start  (dotproductaccel0),

	// Outputs.
	.done   (dotproductaccel1),
	.result (dotproductaccel2)
);

(* FREQUENCY_PIN_CLKI = "25.0", FREQUENCY_PIN_CLKOP = "60.0", FREQUENCY_PIN_CLKOS = "60.0", ICP_CURRENT = "6", LPF_RESISTOR = "16", MFG_ENABLE_FILTEROPAMP = "1", MFG_GMCREF_SEL = "2" *)
//------------------------------------------------------------------------------
// Instance EHXPLLL of EHXPLLL Module.
//------------------------------------------------------------------------------
EHXPLLL #(
	// Parameters.
	.CLKFB_DIV     (5'd24),
	.CLKI_DIV      (1'd1),
	.CLKOP_CPHASE  (4'd9),
	.CLKOP_DIV     (4'd10),
	.CLKOP_ENABLE  ("ENABLED"),
	.CLKOP_FPHASE  (1'd0),
	.CLKOS2_CPHASE (1'd0),
	.CLKOS2_DIV    (1'd1),
	.CLKOS2_ENABLE ("ENABLED"),
	.CLKOS2_FPHASE (1'd0),
	.CLKOS_CPHASE  (4'd14),
	.CLKOS_DIV     (4'd10),
	.CLKOS_ENABLE  ("ENABLED"),
	.CLKOS_FPHASE  (1'd0),
	.FEEDBK_PATH   ("INT_OS2")
) EHXPLLL (
	// Inputs.
	.CLKI   (crg_ecp5pll3),
	.RST    (crg_ecp5pll0),
	.STDBY  (crg_ecp5pll2),

	// Outputs.
	.CLKOP  (crg_ecp5pll4),
	.CLKOS  (crg_ecp5pll5),
	.CLKOS2 (ecp5pll_ecp5pll),
	.LOCK   (ecp5pll)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (vexriscv_interface1_ack),
	.dBusWishbone_DAT_MISO  (vexriscv_interface1_dat_r),
	.dBusWishbone_ERR       (vexriscv_interface1_err),
	.externalInterruptArray (vexriscv1),
	.externalResetVector    (vexriscv2),
	.iBusWishbone_ACK       (vexriscv_interface0_ack),
	.iBusWishbone_DAT_MISO  (vexriscv_interface0_dat_r),
	.iBusWishbone_ERR       (vexriscv_interface0_err),
	.reset                  ((sys_rst | vexriscv0)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (vexriscv_interface1_adr),
	.dBusWishbone_BTE       (vexriscv_interface1_bte),
	.dBusWishbone_CTI       (vexriscv_interface1_cti),
	.dBusWishbone_CYC       (vexriscv_interface1_cyc),
	.dBusWishbone_DAT_MOSI  (vexriscv_interface1_dat_w),
	.dBusWishbone_SEL       (vexriscv_interface1_sel),
	.dBusWishbone_STB       (vexriscv_interface1_stb),
	.dBusWishbone_WE        (vexriscv_interface1_we),
	.iBusWishbone_ADR       (vexriscv_interface0_adr),
	.iBusWishbone_BTE       (vexriscv_interface0_bte),
	.iBusWishbone_CTI       (vexriscv_interface0_cti),
	.iBusWishbone_CYC       (vexriscv_interface0_cyc),
	.iBusWishbone_DAT_MOSI  (vexriscv_interface0_dat_w),
	.iBusWishbone_SEL       (vexriscv_interface0_sel),
	.iBusWishbone_STB       (vexriscv_interface0_stb),
	.iBusWishbone_WE        (vexriscv_interface0_we)
);

//------------------------------------------------------------------------------
// Instance FD1S3BX of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX(
	// Inputs.
	.CK (sys_clk),
	.D  (1'd0),
	.PD ((~crg_ecp5pll1)),

	// Outputs.
	.Q  (latticeecp5asyncresetsynchronizerimpl0)
);

//------------------------------------------------------------------------------
// Instance FD1S3BX_1 of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX_1(
	// Inputs.
	.CK (sys_clk),
	.D  (latticeecp5asyncresetsynchronizerimpl0),
	.PD ((~crg_ecp5pll1)),

	// Outputs.
	.Q  (sys_rst)
);

//------------------------------------------------------------------------------
// Instance FD1S3BX_2 of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX_2(
	// Inputs.
	.CK (sys_ps_clk),
	.D  (1'd0),
	.PD ((~crg_ecp5pll1)),

	// Outputs.
	.Q  (latticeecp5asyncresetsynchronizerimpl1)
);

//------------------------------------------------------------------------------
// Instance FD1S3BX_3 of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX_3(
	// Inputs.
	.CK (sys_ps_clk),
	.D  (latticeecp5asyncresetsynchronizerimpl1),
	.PD ((~crg_ecp5pll1)),

	// Outputs.
	.Q  (sys_ps_rst)
);

//------------------------------------------------------------------------------
// Instance ODDRX1F of ODDRX1F Module.
//------------------------------------------------------------------------------
ODDRX1F ODDRX1F(
	// Inputs.
	.D0   (1'd1),
	.D1   (1'd0),
	.SCLK (sys_ps_clk),

	// Outputs.
	.Q    (sdram_clock)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-10-01 09:27:45.
//------------------------------------------------------------------------------
