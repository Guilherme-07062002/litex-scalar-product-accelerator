//--------------------------------------------------------------------------------
// Auto-generated by LiteX (1c33ca9) on 2025-09-29 20:18:06
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// CSR Includes.
//--------------------------------------------------------------------------------

#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0xf0000000L
#endif /* ! CSR_BASE */

//--------------------------------------------------------------------------------
// CSR Registers/Fields Definition.
//--------------------------------------------------------------------------------

/* DOTP Registers */
#define CSR_DOTP_BASE (CSR_BASE + 0x0L)
#define CSR_DOTP_A0_ADDR (CSR_BASE + 0x0L)
#define CSR_DOTP_A0_SIZE 1
#define CSR_DOTP_A1_ADDR (CSR_BASE + 0x4L)
#define CSR_DOTP_A1_SIZE 1
#define CSR_DOTP_A2_ADDR (CSR_BASE + 0x8L)
#define CSR_DOTP_A2_SIZE 1
#define CSR_DOTP_A3_ADDR (CSR_BASE + 0xcL)
#define CSR_DOTP_A3_SIZE 1
#define CSR_DOTP_A4_ADDR (CSR_BASE + 0x10L)
#define CSR_DOTP_A4_SIZE 1
#define CSR_DOTP_A5_ADDR (CSR_BASE + 0x14L)
#define CSR_DOTP_A5_SIZE 1
#define CSR_DOTP_A6_ADDR (CSR_BASE + 0x18L)
#define CSR_DOTP_A6_SIZE 1
#define CSR_DOTP_A7_ADDR (CSR_BASE + 0x1cL)
#define CSR_DOTP_A7_SIZE 1
#define CSR_DOTP_B0_ADDR (CSR_BASE + 0x20L)
#define CSR_DOTP_B0_SIZE 1
#define CSR_DOTP_B1_ADDR (CSR_BASE + 0x24L)
#define CSR_DOTP_B1_SIZE 1
#define CSR_DOTP_B2_ADDR (CSR_BASE + 0x28L)
#define CSR_DOTP_B2_SIZE 1
#define CSR_DOTP_B3_ADDR (CSR_BASE + 0x2cL)
#define CSR_DOTP_B3_SIZE 1
#define CSR_DOTP_B4_ADDR (CSR_BASE + 0x30L)
#define CSR_DOTP_B4_SIZE 1
#define CSR_DOTP_B5_ADDR (CSR_BASE + 0x34L)
#define CSR_DOTP_B5_SIZE 1
#define CSR_DOTP_B6_ADDR (CSR_BASE + 0x38L)
#define CSR_DOTP_B6_SIZE 1
#define CSR_DOTP_B7_ADDR (CSR_BASE + 0x3cL)
#define CSR_DOTP_B7_SIZE 1
#define CSR_DOTP_START_ADDR (CSR_BASE + 0x40L)
#define CSR_DOTP_START_SIZE 1
#define CSR_DOTP_DONE_ADDR (CSR_BASE + 0x44L)
#define CSR_DOTP_DONE_SIZE 1
#define CSR_DOTP_RESULT_LO_ADDR (CSR_BASE + 0x48L)
#define CSR_DOTP_RESULT_LO_SIZE 1
#define CSR_DOTP_RESULT_HI_ADDR (CSR_BASE + 0x4cL)
#define CSR_DOTP_RESULT_HI_SIZE 1

/* DOTP Fields */

/* IDENTIFIER_MEM Registers */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x800L)

/* IDENTIFIER_MEM Fields */

//--------------------------------------------------------------------------------
// CSR Registers Access Functions.
//--------------------------------------------------------------------------------

#ifndef LITEX_CSR_ACCESS_FUNCTIONS
#define LITEX_CSR_ACCESS_FUNCTIONS 1
#endif

#if LITEX_CSR_ACCESS_FUNCTIONS

/* DOTP Access Functions */
static inline uint32_t dotp_a0_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void dotp_a0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
static inline uint32_t dotp_a1_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void dotp_a1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
static inline uint32_t dotp_a2_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}
static inline void dotp_a2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8L));
}
static inline uint32_t dotp_a3_read(void) {
	return csr_read_simple((CSR_BASE + 0xcL));
}
static inline void dotp_a3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xcL));
}
static inline uint32_t dotp_a4_read(void) {
	return csr_read_simple((CSR_BASE + 0x10L));
}
static inline void dotp_a4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10L));
}
static inline uint32_t dotp_a5_read(void) {
	return csr_read_simple((CSR_BASE + 0x14L));
}
static inline void dotp_a5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x14L));
}
static inline uint32_t dotp_a6_read(void) {
	return csr_read_simple((CSR_BASE + 0x18L));
}
static inline void dotp_a6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x18L));
}
static inline uint32_t dotp_a7_read(void) {
	return csr_read_simple((CSR_BASE + 0x1cL));
}
static inline void dotp_a7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1cL));
}
static inline uint32_t dotp_b0_read(void) {
	return csr_read_simple((CSR_BASE + 0x20L));
}
static inline void dotp_b0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x20L));
}
static inline uint32_t dotp_b1_read(void) {
	return csr_read_simple((CSR_BASE + 0x24L));
}
static inline void dotp_b1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24L));
}
static inline uint32_t dotp_b2_read(void) {
	return csr_read_simple((CSR_BASE + 0x28L));
}
static inline void dotp_b2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x28L));
}
static inline uint32_t dotp_b3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2cL));
}
static inline void dotp_b3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2cL));
}
static inline uint32_t dotp_b4_read(void) {
	return csr_read_simple((CSR_BASE + 0x30L));
}
static inline void dotp_b4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x30L));
}
static inline uint32_t dotp_b5_read(void) {
	return csr_read_simple((CSR_BASE + 0x34L));
}
static inline void dotp_b5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x34L));
}
static inline uint32_t dotp_b6_read(void) {
	return csr_read_simple((CSR_BASE + 0x38L));
}
static inline void dotp_b6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x38L));
}
static inline uint32_t dotp_b7_read(void) {
	return csr_read_simple((CSR_BASE + 0x3cL));
}
static inline void dotp_b7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3cL));
}
static inline uint32_t dotp_start_read(void) {
	return csr_read_simple((CSR_BASE + 0x40L));
}
static inline void dotp_start_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x40L));
}
static inline uint32_t dotp_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x44L));
}
static inline uint32_t dotp_result_lo_read(void) {
	return csr_read_simple((CSR_BASE + 0x48L));
}
static inline uint32_t dotp_result_hi_read(void) {
	return csr_read_simple((CSR_BASE + 0x4cL));
}

/* IDENTIFIER_MEM Access Functions */
#endif /* LITEX_CSR_ACCESS_FUNCTIONS */

#endif /* ! __GENERATED_CSR_H */
